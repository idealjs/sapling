---
source: packages/sapling_transformer/tests/specs/attribute_expressions/index.tsx
expression: index.tsx
---
# Input
```tsx
import { binding } from "somewhere"

function refFn() {}
const refConst = null;

const selected = true;
let link;
const template = (
  <div id="main" {...results} style={{ color }}>
    <h1
      class="base"
      {...results()}
      disabled
      readonly=""
      title={welcoming()}
      style={{ "background-color": color(), "margin-right": "40px" }}
      classList={{ dynamic: dynamic(), selected }}
    >
      <a href={"/"} ref={link} readonly={value}>
        Welcome
      </a>
    </h1>
  </div>
);

const template2 = (
  <div {...getProps("test")}>
    <div textContent={rowId} />
    <div textContent={row.label} />
    <div innerHTML={"<div/>"} />
  </div>
);

const template3 = (
  <div
    id={/*@once*/ state.id}
    style={/*@once*/ { "background-color": state.color }}
    name={state.name}
    textContent={/*@once*/ state.content}
  />
);

const template4 = <div class="hi" className={state.class} classList={{ "ccc:ddd": true }} />;

const template5 = <div class="a" className="b"></div>;

const template6 = <div style={someStyle()} textContent="Hi" />;

const template7 = (
  <div
    style={{ "background-color": color(), "margin-right": "40px", ...props.style }}
    style:padding-top={props.top}
    class:my-class={props.active}
  />
);

let refTarget;
const template8 = <div ref={refTarget} />;

const template9 = <div ref={e => console.log(e)} />;

const template10 = <div ref={refFactory()} />;

const template11 = <div use:something use:another={thing} use:zero={0} />;

const template12 = <div prop:htmlFor={thing} />;

const template13 = <input type="checkbox" checked={true} />;

const template14 = <input type="checkbox" checked={state.visible} />;

const template15 = <div class="`a">`$`</div>;

const template16 = (
  <button
    class="static"
    classList={{
      hi: "k"
    }}
    type="button"
  >
    Write
  </button>
);

const template17 = (
  <button
    classList={{
      a: true,
      b: true,
      c: true
    }}
    onClick={increment}
  >
    Hi
  </button>
);

const template18 = (
  <div
    {...{
      get [key()]() {
        return props.value;
      }
    }}
  />
);

const template19 = <div style={{ a: "static", ...rest }} ></div>

const template20 = <div use:something {...somethingElse} use:zero={0} />;

const template21 = <div ref={a().b.c} />

const template22 = <div ref={a().b?.c} />

const template23 = <div ref={a() ? b : c} />

const template24 = <div ref={a() ?? b} />

const template25 = <div ref={binding} />
const template26 = <div ref={binding.prop} />

const template27 = <div ref={refFn} />
const template28 = <div ref={refConst} />

const template29 = <div ref={refUnknown} />
```

# Transformations
```tsx
import { effect as _$effect } from "r-custom";
import { createTextNode as _$createTextNode } from "r-custom";
import { insertNode as _$insertNode } from "r-custom";
import { use as _$use } from "r-custom";
import { setProp as _$setProp } from "r-custom";
import { spread as _$spread } from "r-custom";
import { mergeProps as _$mergeProps } from "r-custom";
import { createElement as _$createElement } from "r-custom";
import { binding } from "somewhere";
function refFn() {}
const refConst = null;
const selected = true;
let link;
const template = (() => {
  var _el$ = _$createElement("div"),
    _el$2 = _$createElement("h1"),
    _el$3 = _$createElement("a");
  _$insertNode(_el$, _el$2);
  _$setProp(_el$, "id", "main");
  _$spread(
    _el$,
    _$mergeProps(results, {
      style: {
        color
      }
    }),
    true
  );
  _$insertNode(_el$2, _el$3);
  _$setProp(_el$2, "class", "base");
  _$spread(
    _el$2,
    _$mergeProps(results, {
      disabled: true,
      readonly: "",
      get title() {
        return welcoming();
      },
      get style() {
        return {
          "background-color": color(),
          "margin-right": "40px"
        };
      },
      get classList() {
        return {
          dynamic: dynamic(),
          selected
        };
      }
    }),
    true
  );
  _$insertNode(_el$3, _$createTextNode(`Welcome`));
  var _ref$ = link;
  typeof _ref$ === "function" ? _$use(_ref$, _el$3) : (link = _el$3);
  _$setProp(_el$3, "href", "/");
  _$setProp(_el$3, "readonly", value);
  return _el$;
})();
// ...其余内容保持原样