---
source: packages/sapling_shared/tests/get_static_expression_teste.rs
expression: "format!(\"{:?}\", visitor.arena)"
---
Arena { nodes: [Node { parent: None, previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 2, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 38, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(Program(Program { span: Span { start: 0, end: 171 }, source_text: "\"use client\";\n\nconst style = (values: unknown): string => {\n  return \"\";\n};\n\nconst Test = () => {\n  return <div className={style({})}>Test</div>;\n};\n\nexport default Test;\n", comments: Vec([]), hashbang: None, directives: Vec([Directive { span: Span { start: 0, end: 13 }, expression: StringLiteral { span: Span { start: 0, end: 12 }, value: "use client", raw: Some("\"use client\""), lone_surrogates: false }, directive: "use client" }]), body: Vec([VariableDeclaration(VariableDeclaration { span: Span { start: 15, end: 75 }, declarations: Vec([VariableDeclarator { span: Span { start: 21, end: 74 }, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 21, end: 26 }, name: "style", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 29, end: 74 }, type_parameters: None, params: FormalParameters { span: Span { start: 29, end: 46 }, items: Vec([FormalParameter { span: Span { start: 30, end: 45 }, decorators: Vec([]), pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 30, end: 45 }, name: "values", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 36, end: 45 }, type_annotation: TSUnknownKeyword(TSUnknownKeyword { span: Span { start: 38, end: 45 } }) }), optional: false }, accessibility: None, readonly: false, override: false }]), rest: None, kind: ArrowFormalParameters }, return_type: Some(TSTypeAnnotation { span: Span { start: 46, end: 54 }, type_annotation: TSStringKeyword(TSStringKeyword { span: Span { start: 48, end: 54 } }) }), body: FunctionBody { span: Span { start: 58, end: 74 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 62, end: 72 }, argument: Some(StringLiteral(StringLiteral { span: Span { start: 69, end: 71 }, value: "", raw: Some("\"\""), lone_surrogates: false })) })]) }, scope_id: Cell { value: None }, expression: false, async: false, pure: false })), kind: Const, definite: false }]), kind: Const, declare: false }), VariableDeclaration(VariableDeclaration { span: Span { start: 77, end: 148 }, declarations: Vec([VariableDeclarator { span: Span { start: 83, end: 147 }, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 83, end: 87 }, name: "Test", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 90, end: 147 }, type_parameters: None, params: FormalParameters { span: Span { start: 90, end: 92 }, items: Vec([]), rest: None, kind: ArrowFormalParameters }, return_type: None, body: FunctionBody { span: Span { start: 96, end: 147 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 100, end: 145 }, argument: Some(JSXElement(JSXElement { span: Span { start: 107, end: 144 }, opening_element: JSXOpeningElement { span: Span { start: 107, end: 134 }, name: Identifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" }), type_arguments: None, attributes: Vec([Attribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })]) }, children: Vec([Text(JSXText { span: Span { start: 134, end: 138 }, value: "Test", raw: Some("Test") })]), closing_element: Some(JSXClosingElement { span: Span { start: 138, end: 144 }, name: Identifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" }) }) })) })]) }, scope_id: Cell { value: None }, expression: false, async: false, pure: false })), kind: Const, definite: false }]), kind: Const, declare: false }), ExportDefaultDeclaration(ExportDefaultDeclaration { span: Span { start: 150, end: 170 }, exported: IdentifierName(IdentifierName { span: Span { start: 157, end: 164 }, name: "default" }), declaration: Identifier(IdentifierReference { span: Span { start: 165, end: 169 }, name: "Test", reference_id: Cell { value: None } }) })]), scope_id: Cell { value: None }, source_type: SourceType { language: TypeScript, module_kind: Module, variant: Jsx } })) }, Node { parent: Some(NodeId { index1: 1, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 4, stamp: NodeStamp(0) }), first_child: Some(NodeId { index1: 3, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 3, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(Directive(Directive { span: Span { start: 0, end: 13 }, expression: StringLiteral { span: Span { start: 0, end: 12 }, value: "use client", raw: Some("\"use client\""), lone_surrogates: false }, directive: "use client" })) }, Node { parent: Some(NodeId { index1: 2, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(StringLiteral(StringLiteral { span: Span { start: 0, end: 12 }, value: "use client", raw: Some("\"use client\""), lone_surrogates: false })) }, Node { parent: Some(NodeId { index1: 1, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 2, stamp: NodeStamp(0) }), next_sibling: Some(NodeId { index1: 18, stamp: NodeStamp(0) }), first_child: Some(NodeId { index1: 5, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 5, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(VariableDeclaration(VariableDeclaration { span: Span { start: 15, end: 75 }, declarations: Vec([VariableDeclarator { span: Span { start: 21, end: 74 }, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 21, end: 26 }, name: "style", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 29, end: 74 }, type_parameters: None, params: FormalParameters { span: Span { start: 29, end: 46 }, items: Vec([FormalParameter { span: Span { start: 30, end: 45 }, decorators: Vec([]), pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 30, end: 45 }, name: "values", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 36, end: 45 }, type_annotation: TSUnknownKeyword(TSUnknownKeyword { span: Span { start: 38, end: 45 } }) }), optional: false }, accessibility: None, readonly: false, override: false }]), rest: None, kind: ArrowFormalParameters }, return_type: Some(TSTypeAnnotation { span: Span { start: 46, end: 54 }, type_annotation: TSStringKeyword(TSStringKeyword { span: Span { start: 48, end: 54 } }) }), body: FunctionBody { span: Span { start: 58, end: 74 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 62, end: 72 }, argument: Some(StringLiteral(StringLiteral { span: Span { start: 69, end: 71 }, value: "", raw: Some("\"\""), lone_surrogates: false })) })]) }, scope_id: Cell { value: None }, expression: false, async: false, pure: false })), kind: Const, definite: false }]), kind: Const, declare: false })) }, Node { parent: Some(NodeId { index1: 4, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 6, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 7, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(VariableDeclarator(VariableDeclarator { span: Span { start: 21, end: 74 }, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 21, end: 26 }, name: "style", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 29, end: 74 }, type_parameters: None, params: FormalParameters { span: Span { start: 29, end: 46 }, items: Vec([FormalParameter { span: Span { start: 30, end: 45 }, decorators: Vec([]), pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 30, end: 45 }, name: "values", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 36, end: 45 }, type_annotation: TSUnknownKeyword(TSUnknownKeyword { span: Span { start: 38, end: 45 } }) }), optional: false }, accessibility: None, readonly: false, override: false }]), rest: None, kind: ArrowFormalParameters }, return_type: Some(TSTypeAnnotation { span: Span { start: 46, end: 54 }, type_annotation: TSStringKeyword(TSStringKeyword { span: Span { start: 48, end: 54 } }) }), body: FunctionBody { span: Span { start: 58, end: 74 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 62, end: 72 }, argument: Some(StringLiteral(StringLiteral { span: Span { start: 69, end: 71 }, value: "", raw: Some("\"\""), lone_surrogates: false })) })]) }, scope_id: Cell { value: None }, expression: false, async: false, pure: false })), kind: Const, definite: false })) }, Node { parent: Some(NodeId { index1: 5, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 7, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(BindingIdentifier(BindingIdentifier { span: Span { start: 21, end: 26 }, name: "style", symbol_id: Cell { value: None } })) }, Node { parent: Some(NodeId { index1: 5, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 6, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 8, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 15, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 29, end: 74 }, type_parameters: None, params: FormalParameters { span: Span { start: 29, end: 46 }, items: Vec([FormalParameter { span: Span { start: 30, end: 45 }, decorators: Vec([]), pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 30, end: 45 }, name: "values", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 36, end: 45 }, type_annotation: TSUnknownKeyword(TSUnknownKeyword { span: Span { start: 38, end: 45 } }) }), optional: false }, accessibility: None, readonly: false, override: false }]), rest: None, kind: ArrowFormalParameters }, return_type: Some(TSTypeAnnotation { span: Span { start: 46, end: 54 }, type_annotation: TSStringKeyword(TSStringKeyword { span: Span { start: 48, end: 54 } }) }), body: FunctionBody { span: Span { start: 58, end: 74 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 62, end: 72 }, argument: Some(StringLiteral(StringLiteral { span: Span { start: 69, end: 71 }, value: "", raw: Some("\"\""), lone_surrogates: false })) })]) }, scope_id: Cell { value: None }, expression: false, async: false, pure: false })) }, Node { parent: Some(NodeId { index1: 7, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 13, stamp: NodeStamp(0) }), first_child: Some(NodeId { index1: 9, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 9, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(FormalParameters(FormalParameters { span: Span { start: 29, end: 46 }, items: Vec([FormalParameter { span: Span { start: 30, end: 45 }, decorators: Vec([]), pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 30, end: 45 }, name: "values", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 36, end: 45 }, type_annotation: TSUnknownKeyword(TSUnknownKeyword { span: Span { start: 38, end: 45 } }) }), optional: false }, accessibility: None, readonly: false, override: false }]), rest: None, kind: ArrowFormalParameters })) }, Node { parent: Some(NodeId { index1: 8, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 10, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 11, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(FormalParameter(FormalParameter { span: Span { start: 30, end: 45 }, decorators: Vec([]), pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 30, end: 45 }, name: "values", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 36, end: 45 }, type_annotation: TSUnknownKeyword(TSUnknownKeyword { span: Span { start: 38, end: 45 } }) }), optional: false }, accessibility: None, readonly: false, override: false })) }, Node { parent: Some(NodeId { index1: 9, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 11, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(BindingIdentifier(BindingIdentifier { span: Span { start: 30, end: 45 }, name: "values", symbol_id: Cell { value: None } })) }, Node { parent: Some(NodeId { index1: 9, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 10, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 12, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 12, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(TSTypeAnnotation(TSTypeAnnotation { span: Span { start: 36, end: 45 }, type_annotation: TSUnknownKeyword(TSUnknownKeyword { span: Span { start: 38, end: 45 } }) })) }, Node { parent: Some(NodeId { index1: 11, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(TSUnknownKeyword(TSUnknownKeyword { span: Span { start: 38, end: 45 } })) }, Node { parent: Some(NodeId { index1: 7, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 8, stamp: NodeStamp(0) }), next_sibling: Some(NodeId { index1: 15, stamp: NodeStamp(0) }), first_child: Some(NodeId { index1: 14, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 14, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(TSTypeAnnotation(TSTypeAnnotation { span: Span { start: 46, end: 54 }, type_annotation: TSStringKeyword(TSStringKeyword { span: Span { start: 48, end: 54 } }) })) }, Node { parent: Some(NodeId { index1: 13, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(TSStringKeyword(TSStringKeyword { span: Span { start: 48, end: 54 } })) }, Node { parent: Some(NodeId { index1: 7, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 13, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 16, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 16, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(FunctionBody(FunctionBody { span: Span { start: 58, end: 74 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 62, end: 72 }, argument: Some(StringLiteral(StringLiteral { span: Span { start: 69, end: 71 }, value: "", raw: Some("\"\""), lone_surrogates: false })) })]) })) }, Node { parent: Some(NodeId { index1: 15, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 17, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 17, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(ReturnStatement(ReturnStatement { span: Span { start: 62, end: 72 }, argument: Some(StringLiteral(StringLiteral { span: Span { start: 69, end: 71 }, value: "", raw: Some("\"\""), lone_surrogates: false })) })) }, Node { parent: Some(NodeId { index1: 16, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(StringLiteral(StringLiteral { span: Span { start: 69, end: 71 }, value: "", raw: Some("\"\""), lone_surrogates: false })) }, Node { parent: Some(NodeId { index1: 1, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 4, stamp: NodeStamp(0) }), next_sibling: Some(NodeId { index1: 38, stamp: NodeStamp(0) }), first_child: Some(NodeId { index1: 19, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 19, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(VariableDeclaration(VariableDeclaration { span: Span { start: 77, end: 148 }, declarations: Vec([VariableDeclarator { span: Span { start: 83, end: 147 }, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 83, end: 87 }, name: "Test", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 90, end: 147 }, type_parameters: None, params: FormalParameters { span: Span { start: 90, end: 92 }, items: Vec([]), rest: None, kind: ArrowFormalParameters }, return_type: None, body: FunctionBody { span: Span { start: 96, end: 147 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 100, end: 145 }, argument: Some(JSXElement(JSXElement { span: Span { start: 107, end: 144 }, opening_element: JSXOpeningElement { span: Span { start: 107, end: 134 }, name: Identifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" }), type_arguments: None, attributes: Vec([Attribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })]) }, children: Vec([Text(JSXText { span: Span { start: 134, end: 138 }, value: "Test", raw: Some("Test") })]), closing_element: Some(JSXClosingElement { span: Span { start: 138, end: 144 }, name: Identifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" }) }) })) })]) }, scope_id: Cell { value: None }, expression: false, async: false, pure: false })), kind: Const, definite: false }]), kind: Const, declare: false })) }, Node { parent: Some(NodeId { index1: 18, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 20, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 21, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(VariableDeclarator(VariableDeclarator { span: Span { start: 83, end: 147 }, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 83, end: 87 }, name: "Test", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 90, end: 147 }, type_parameters: None, params: FormalParameters { span: Span { start: 90, end: 92 }, items: Vec([]), rest: None, kind: ArrowFormalParameters }, return_type: None, body: FunctionBody { span: Span { start: 96, end: 147 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 100, end: 145 }, argument: Some(JSXElement(JSXElement { span: Span { start: 107, end: 144 }, opening_element: JSXOpeningElement { span: Span { start: 107, end: 134 }, name: Identifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" }), type_arguments: None, attributes: Vec([Attribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })]) }, children: Vec([Text(JSXText { span: Span { start: 134, end: 138 }, value: "Test", raw: Some("Test") })]), closing_element: Some(JSXClosingElement { span: Span { start: 138, end: 144 }, name: Identifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" }) }) })) })]) }, scope_id: Cell { value: None }, expression: false, async: false, pure: false })), kind: Const, definite: false })) }, Node { parent: Some(NodeId { index1: 19, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 21, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(BindingIdentifier(BindingIdentifier { span: Span { start: 83, end: 87 }, name: "Test", symbol_id: Cell { value: None } })) }, Node { parent: Some(NodeId { index1: 19, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 20, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 22, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 23, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 90, end: 147 }, type_parameters: None, params: FormalParameters { span: Span { start: 90, end: 92 }, items: Vec([]), rest: None, kind: ArrowFormalParameters }, return_type: None, body: FunctionBody { span: Span { start: 96, end: 147 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 100, end: 145 }, argument: Some(JSXElement(JSXElement { span: Span { start: 107, end: 144 }, opening_element: JSXOpeningElement { span: Span { start: 107, end: 134 }, name: Identifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" }), type_arguments: None, attributes: Vec([Attribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })]) }, children: Vec([Text(JSXText { span: Span { start: 134, end: 138 }, value: "Test", raw: Some("Test") })]), closing_element: Some(JSXClosingElement { span: Span { start: 138, end: 144 }, name: Identifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" }) }) })) })]) }, scope_id: Cell { value: None }, expression: false, async: false, pure: false })) }, Node { parent: Some(NodeId { index1: 21, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 23, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(FormalParameters(FormalParameters { span: Span { start: 90, end: 92 }, items: Vec([]), rest: None, kind: ArrowFormalParameters })) }, Node { parent: Some(NodeId { index1: 21, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 22, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 24, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 24, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(FunctionBody(FunctionBody { span: Span { start: 96, end: 147 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 100, end: 145 }, argument: Some(JSXElement(JSXElement { span: Span { start: 107, end: 144 }, opening_element: JSXOpeningElement { span: Span { start: 107, end: 134 }, name: Identifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" }), type_arguments: None, attributes: Vec([Attribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })]) }, children: Vec([Text(JSXText { span: Span { start: 134, end: 138 }, value: "Test", raw: Some("Test") })]), closing_element: Some(JSXClosingElement { span: Span { start: 138, end: 144 }, name: Identifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" }) }) })) })]) })) }, Node { parent: Some(NodeId { index1: 23, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 25, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 25, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(ReturnStatement(ReturnStatement { span: Span { start: 100, end: 145 }, argument: Some(JSXElement(JSXElement { span: Span { start: 107, end: 144 }, opening_element: JSXOpeningElement { span: Span { start: 107, end: 134 }, name: Identifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" }), type_arguments: None, attributes: Vec([Attribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })]) }, children: Vec([Text(JSXText { span: Span { start: 134, end: 138 }, value: "Test", raw: Some("Test") })]), closing_element: Some(JSXClosingElement { span: Span { start: 138, end: 144 }, name: Identifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" }) }) })) })) }, Node { parent: Some(NodeId { index1: 24, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 26, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 36, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(JSXElement(JSXElement { span: Span { start: 107, end: 144 }, opening_element: JSXOpeningElement { span: Span { start: 107, end: 134 }, name: Identifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" }), type_arguments: None, attributes: Vec([Attribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })]) }, children: Vec([Text(JSXText { span: Span { start: 134, end: 138 }, value: "Test", raw: Some("Test") })]), closing_element: Some(JSXClosingElement { span: Span { start: 138, end: 144 }, name: Identifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" }) }) })) }, Node { parent: Some(NodeId { index1: 25, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 35, stamp: NodeStamp(0) }), first_child: Some(NodeId { index1: 27, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 28, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(JSXOpeningElement(JSXOpeningElement { span: Span { start: 107, end: 134 }, name: Identifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" }), type_arguments: None, attributes: Vec([Attribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })]) })) }, Node { parent: Some(NodeId { index1: 26, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 28, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(JSXIdentifier(JSXIdentifier { span: Span { start: 108, end: 111 }, name: "div" })) }, Node { parent: Some(NodeId { index1: 26, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 27, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 29, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 30, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(JSXAttribute(JSXAttribute { span: Span { start: 112, end: 133 }, name: Identifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" }), value: Some(ExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) })) }, Node { parent: Some(NodeId { index1: 28, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 30, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(JSXIdentifier(JSXIdentifier { span: Span { start: 112, end: 121 }, name: "className" })) }, Node { parent: Some(NodeId { index1: 28, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 29, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 31, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 31, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(JSXExpressionContainer(JSXExpressionContainer { span: Span { start: 122, end: 133 }, expression: CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false }) })) }, Node { parent: Some(NodeId { index1: 30, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 32, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 33, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(CallExpression(CallExpression { span: Span { start: 123, end: 132 }, callee: Identifier(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } }), type_arguments: None, arguments: Vec([ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })]), optional: false, pure: false })) }, Node { parent: Some(NodeId { index1: 31, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 33, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(IdentifierReference(IdentifierReference { span: Span { start: 123, end: 128 }, name: "style", reference_id: Cell { value: None } })) }, Node { parent: Some(NodeId { index1: 31, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 32, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 34, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 34, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(Argument(ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) }))) }, Node { parent: Some(NodeId { index1: 33, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(ObjectExpression(ObjectExpression { span: Span { start: 129, end: 131 }, properties: Vec([]) })) }, Node { parent: Some(NodeId { index1: 25, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 26, stamp: NodeStamp(0) }), next_sibling: Some(NodeId { index1: 36, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(JSXText(JSXText { span: Span { start: 134, end: 138 }, value: "Test", raw: Some("Test") })) }, Node { parent: Some(NodeId { index1: 25, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 35, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 37, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 37, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(JSXClosingElement(JSXClosingElement { span: Span { start: 138, end: 144 }, name: Identifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" }) })) }, Node { parent: Some(NodeId { index1: 36, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(JSXIdentifier(JSXIdentifier { span: Span { start: 140, end: 143 }, name: "div" })) }, Node { parent: Some(NodeId { index1: 1, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 18, stamp: NodeStamp(0) }), next_sibling: None, first_child: Some(NodeId { index1: 39, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 39, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(ModuleDeclaration(ExportDefaultDeclaration(ExportDefaultDeclaration { span: Span { start: 150, end: 170 }, exported: IdentifierName(IdentifierName { span: Span { start: 157, end: 164 }, name: "default" }), declaration: Identifier(IdentifierReference { span: Span { start: 165, end: 169 }, name: "Test", reference_id: Cell { value: None } }) }))) }, Node { parent: Some(NodeId { index1: 38, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: None, first_child: Some(NodeId { index1: 40, stamp: NodeStamp(0) }), last_child: Some(NodeId { index1: 41, stamp: NodeStamp(0) }), stamp: NodeStamp(0), data: Data(ExportDefaultDeclaration(ExportDefaultDeclaration { span: Span { start: 150, end: 170 }, exported: IdentifierName(IdentifierName { span: Span { start: 157, end: 164 }, name: "default" }), declaration: Identifier(IdentifierReference { span: Span { start: 165, end: 169 }, name: "Test", reference_id: Cell { value: None } }) })) }, Node { parent: Some(NodeId { index1: 39, stamp: NodeStamp(0) }), previous_sibling: None, next_sibling: Some(NodeId { index1: 41, stamp: NodeStamp(0) }), first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(IdentifierName(IdentifierName { span: Span { start: 157, end: 164 }, name: "default" })) }, Node { parent: Some(NodeId { index1: 39, stamp: NodeStamp(0) }), previous_sibling: Some(NodeId { index1: 40, stamp: NodeStamp(0) }), next_sibling: None, first_child: None, last_child: None, stamp: NodeStamp(0), data: Data(IdentifierReference(IdentifierReference { span: Span { start: 165, end: 169 }, name: "Test", reference_id: Cell { value: None } })) }], first_free_slot: None, last_free_slot: None }
