---
source: crates/sapling_transformer/tests/test_utils.rs
expression: fragments.tsx
---
# Input
```tsx
const template1 = (
  <>
    <div>template1</div>
  </>
);

const template2 = (
  <>
    <div>
      <h1>template2</h1>
    </div>
  </>
);

const template3 = (
  <>
    <div>template1</div>
    <div>template1</div>
  </>
);

const template4 = (
  <>
    <div>
      <h1>template2</h1>
    </div>
    <div>
      <h1>template2</h1>
    </div>
  </>
);

const template5 = (
  <div>
    <>
      <div>template1</div>
    </>
  </div>
);

const template6 = (
  <div>
    <>
      <div>
        <h1>template2</h1>
      </div>
      <div>
        <h1>template2</h1>
      </div>
    </>
  </div>
);

```

# Transformations
```tsx
const template1 = _$createJsxTagElement(() => {
  let _el$ = _$createElement("div");
  _$insertNode(_el$, _$createTextNode("template1"));
  return _el$;
});

const template2 = _$createJsxTagElement(() => {
  let _el$ = _$createElement("div");
  let _el$1 = _$createElement("h1");
  _$insertNode(_el$1, _$createTextNode("template2"));
  _$insertNode(_el$, _el$1);
  return _el$;
});

const template3 = [
  _$createJsxTagElement(() => {
    let _el$ = _$createElement("div");
    _$insertNode(_el$, _$createTextNode("template1"));
    return _el$;
  }),
  _$createJsxTagElement(() => {
    let _el$1 = _$createElement("div");
    _$insertNode(_el$1, _$createTextNode("template1"));
    return _el$1;
  }),
];

const template4 = [
  _$createJsxTagElement(() => {
    let _el$ = _$createElement("div");
    let _el$1 = _$createElement("h1");
    _$insertNode(_el$1, _$createTextNode("template2"));
    _$insertNode(_el$, _el$1);
    return _el$;
  }),
  _$createJsxTagElement(() => {
    let _el$2 = _$createElement("div");
    let _el$3 = _$createElement("h1");
    _$insertNode(_el$3, _$createTextNode("template2"));
    _$insertNode(_el$2, _el$3);
    return _el$2;
  }),
];

const template5 = _$createJsxTagElement(() => {
  let _el$ = _$createElement("div");
  _$insert(
    _el$,
    _$createJsxTagElement(() => {
      let _el$1 = _$createElement("div");
      _$insertNode(_el$1, _$createTextNode("template1"));
      return _el$1;
    }),
  );
  return _el$;
});

const template6 = _$createJsxTagElement(() => {
  let _el$ = _$createElement("div");
  _$insert(_el$, [
    _$createJsxTagElement(() => {
      let _el$1 = _$createElement("div");
      let _el$2 = _$createElement("h1");
      _$insertNode(_el$2, _$createTextNode("template2"));
      _$insertNode(_el$1, _el$2);
      return _el$1;
    }),
    _$createJsxTagElement(() => {
      let _el$3 = _$createElement("div");
      let _el$4 = _$createElement("h1");
      _$insertNode(_el$4, _$createTextNode("template2"));
      _$insertNode(_el$3, _el$4);
      return _el$3;
    }),
  ]);
  return _el$;
});

```
