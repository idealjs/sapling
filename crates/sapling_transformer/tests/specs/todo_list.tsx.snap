---
source: crates/sapling_transformer/tests/test_utils.rs
expression: todo_list.tsx
---
# Input
```tsx
import { State } from "@idealjs/sapling-reactive";

import For from "./for";

class App {
  @State accessor todos: ITodo[] = [];
  render() {
    return (
      <div>
        <For each={this.todos} fallback={<div>Loading...</div>}>
          {(item) => <Todo todo={item} />}
        </For>
      </div>
    );
  }
}

export interface ITodo {
  name: string;
  done: boolean;
}

interface IProps {
  todo: ITodo;
}

class Todo {
  @State accessor props: IProps;
  constructor(_props: IProps) {
    this.props = _props;
  }
  render() {
    const { todo } = this.props;
    return <div>{todo.name}</div>;
  }
}

export default App;

```

# Transformations
```tsx
import { State } from "@idealjs/sapling-reactive";

import For from "./for";

class App {
  @State accessor todos: ITodo[] = [];
  render() {
    return (
      <div>
        <For
          each={this.todos}
          fallback={_$createJsxTagElement(() => {
            let _el$2 = _$createElement("div");
            _$insertNode(_el$2, _$createTextNode("Loading..."));
            return _el$2;
          })}
        >
          {(item) =>
            _$createJsxTagElement(() => {
              let _el$ = _$createElement("Todo");
              _$setProp(_el$, "todo", item);
              return _el$;
            })
          }
        </For>
      </div>
    );
  }
}

export interface ITodo {
  name: string;
  done: boolean;
}

interface IProps {
  todo: ITodo;
}

class Todo {
  @State accessor props: IProps;
  constructor(_props: IProps) {
    this.props = _props;
  }
  render() {
    const { todo } = this.props;
    return _$createJsxTagElement(() => {
      let _el$ = _$createElement("div");
      _$insert(_el$, todo.name);
      return _el$;
    });
  }
}

export default App;

```
