---
source: crates/sapling_transformer/tests/test_utils.rs
expression: todo_list.tsx
---
# Input
```tsx
import { State } from "@idealjs/sapling";

import For from "./for";

class App {
  @State accessor todos: ITodo[] = [];
  render() {
    return (
      <div>
        <For each={this.todos} fallback={<div>Loading...</div>}>
          {(item) => <Todo todo={item} />}
        </For>
      </div>
    );
  }
}

export interface ITodo {
  name: string;
  done: boolean;
}

interface IProps {
  todo: ITodo;
}

class Todo {
  @State accessor props: IProps;
  constructor(_props: IProps) {
    this.props = _props;
  }
  render() {
    const { todo } = this.props;
    return <div>{todo.name}</div>;
  }
}

export default App;

```

# Transformations
```tsx
import { State } from "@idealjs/sapling";

import For from "./for";

class App {
  @State accessor todos: ITodo[] = [];
  render() {
    return _$createJsxTagElement(() => {
      let _el$ = _$createElement("div");
      let _el$1 = _$createElement("For");
      _$setProp(_el$1, "each", this.todos);
      _$setProp(_el$1, "fallback", <div>Loading...</div>);
      _$insert(_el$1, (item) => <Todo todo={item} />);
      _$insertNode(_el$, _el$1);
      return _el$;
    });
  }
}

export interface ITodo {
  name: string;
  done: boolean;
}

interface IProps {
  todo: ITodo;
}

class Todo {
  @State accessor props: IProps;
  constructor(_props: IProps) {
    this.props = _props;
  }
  render() {
    const { todo } = this.props;
    return _$createJsxTagElement(() => {
      let _el$ = _$createElement("div");
      _$effect(() => {
        _$insert(_el$, todo.name);
      }, [0, 0, 0]);
      return _el$;
    });
  }
}

export default App;

```
