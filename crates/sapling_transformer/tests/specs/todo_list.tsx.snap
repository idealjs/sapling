---
source: crates/sapling_transformer/tests/test_utils.rs
expression: todo_list.tsx
---
# Input
```tsx
import { State } from "@idealjs/sapling";

import For from "./for";

class App {
  @State accessor todos: ITodo[] = [];
  render() {
    return (
      <div>
        <For each={this.todos} fallback={<div>Loading...</div>}>
          {(item) => <Todo todo={item} />}
        </For>
      </div>
    );
  }
}

export interface ITodo {
  name: string;
  done: boolean;
}

interface IProps {
  todo: ITodo;
}

class Todo {
  @State accessor props: IProps;
  constructor(_props: IProps) {
    this.props = _props;
  }
  render() {
    const { todo } = this.props;
    return <div>{todo.name}</div>;
  }
}

export default App;

```

# Transformations
```tsx
import { State } from "@idealjs/sapling";

import For from "./for";

class App {
  @State accessor todos: ITodo[] = [];
  render() {
    return _$createJsxTagElement(() => {
      let _el$ = _$createElement("div");
      let _el$1 = _$createComponent(For);
      _$effect(
        () => {
          _$setProp(_el$1, "each", this.todos);
        },
        () => {
          return [this.todos];
        },
      );
      _$setProp(
        _el$1,
        "fallback",
        _$createJsxTagElement(() => {
          let _el$2 = _$createElement("div");
          _$insertNode(_el$2, _$createTextNode("Loading..."));
          return _el$2;
        }),
      );
      _$setProp(_el$1, "children", [
        (item) =>
          _$createJsxTagElement(() => {
            let _el$3 = _$createElement("Todo");
            _$effect(
              () => {
                _$setProp(_el$3, "todo", item);
              },
              () => {
                return [item];
              },
            );
            return _el$3;
          }),
      ]);
      _$insertNode(_el$, _el$1);
      return _el$;
    });
  }
}

export interface ITodo {
  name: string;
  done: boolean;
}

interface IProps {
  todo: ITodo;
}

class Todo {
  @State accessor props: IProps;
  constructor(_props: IProps) {
    this.props = _props;
  }
  render() {
    const { todo } = this.props;
    return _$createJsxTagElement(() => {
      let _el$ = _$createElement("div");
      _$effect(
        () => {
          _$insert(_el$, todo.name);
        },
        () => {
          return [todo.name];
        },
      );
      return _el$;
    });
  }
}

export default App;

```
