---
source: crates/sapling_transformer/tests/test_utils.rs
expression: counter.tsx
---
# Input
```tsx
import { State } from "@idealjs/sapling";

class App {
  @State
  accessor obj: { counter: { a: number } } = { counter: { a: 0 } };
  public render() {
    let { obj } = this;
    let { counter } = obj;
    let { a } = counter;
    return (
      <div>
        <button
          onClick={() => {
            a++;
          }}
        >
          +
        </button>
        {a}
        {counter.a}
        {obj.counter.a}
        {this.obj.counter.a}
        <button
          onClick={() => {
            a--;
          }}
        >
          -
        </button>
      </div>
    );
  }
}

export default App;

```

# Transformations
```tsx
import { State } from "@idealjs/sapling";

class App {
  @State
  accessor obj: { counter: { a: number } } = { counter: { a: 0 } };
  public render() {
    let { obj } = this;
    let { counter } = obj;
    let { a } = counter;
    return _$createJsxTagElement(() => {
      let _el$ = _$createElement("div");
      let _el$1 = _$createElement("button");
      _$setProp(_el$1, "onClick", () => {
        a++;
      });
      _$insertNode(_el$1, _$createTextNode("+"));
      _$insertNode(_el$, _el$1);
      _$insert(_el$, a);
      _$insert(_el$, counter.a);
      _$insert(_el$, obj.counter.a);
      _$insert(_el$, this.obj.counter.a);
      let _el$2 = _$createElement("button");
      _$setProp(_el$2, "onClick", () => {
        a--;
      });
      _$insertNode(_el$2, _$createTextNode("-"));
      _$insertNode(_el$, _el$2);
      return _el$;
    });
  }
}

export default App;

```
