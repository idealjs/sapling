---
source: crates/sapling_transformer/tests/expr_chain.rs
expression: counter.tsx.chain
---
# Input
```tsx
import { State } from "@idealjs/sapling";

class App {
  @State
  accessor obj: { counter: { a: number; b: number } } = {
    counter: { a: 0, b: 0 },
  };
  public render() {
    let { obj } = this;
    let { counter } = obj;
    let { a } = counter;
    let key: "a" | "b" = "a";
    let xxx: "obj" | "" = "obj";
    return (
      <div>
        <button
          onClick={() => {
            a++;
          }}
        >
          +
        </button>
        {a}
        {counter.a}
        {obj.counter.a}
        {this.obj.counter.a}
        {this.obj.counter[key]}
        {this[xxx].counter[key]}
        <button
          onClick={() => {
            a--;
          }}
        >
          -
        </button>
      </div>
    );
  }
}

export default App;

```

# Transformations
```tsx
obj,counter,a
obj,counter,a
obj,counter,a
obj,counter,a
obj,counter,None
None,counter,None
```
